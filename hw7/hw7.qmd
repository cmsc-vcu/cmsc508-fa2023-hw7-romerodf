---
title: Homework 7 - Creating a resume database
author: Dimayri Romero
date: 11/20/2023
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document explores the resume database that is created from the ddl sql file. It contains a Crows-foot diagram to help visualize the resume database. Many blocks of python code are within this file to help retrieve tables and filter on certain critera to show specific queries from the database. 

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-romerodf>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This project consists of using DDL to build a resume database which captures the skills, employees, and roles within the company. The database will help find employees with specific skills and find any gaps in the skill sets of employees with certain roles.

## Crows-foot diagram

The below is an entity-relationship diagram represented using mermaid syntax. The relationships between people, roles, and skills from the proposed database are shown. There are four entities: skills, people, roles, peopleskills, and people_roles; each have a relationship to at least one other entity. Both skills and people have a many to many relationship with peopleskills. Both people and roles have a many to many relationship with people_roles.

```{mermaid}
%%| echo: false
erDiagram
    skills ||--o{ peopleskills : "M:N"
    people ||--o{ peopleskills : "M:N"
    people ||--o{ people_roles : "M:N"
    roles ||--o{ people_roles : "M:N"

skills {
    primary_key id
    VARCHAR name
    VARCHAR description
    VARCHAR tag
    VARCHAR url
    VARCHAR time_commitment
    
}
people {
    primary_key id
    VARCHAR first_name
    VARCHAR last_name
    VARCHAR email
    VARCHAR linkedin_url
    VARCHAR headshot_url
    VARCHAR discord_handle
    VARCHAR brief_bio
    DATE date_joined

}
peopleskills {
    primary_key id 
    foreign_key skills_id
    foreign_key people_id
    DATE primary_key
}
roles {
    primary_key id 
    VARCHAR name
    int sort_priority
}
people_roles {
    primary_key id
    foreign_key people_id
    foreign_key role_id
    DATE date_role_acquired
}
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe an individual's first and last name along with an identifier or primary key to uniquely identify them in the table. It also contains urls for the individual's linkedin and headshot.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe some of the different kinds of skills that are possible. They have a unique identifier named 'id' along with the name and tag for each of them. The description gives more information about what the skill is.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from skills;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the roles that are currently within the company. It gives the name of each of the roles and a sort priority which will be used when sorting the roles.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from roles;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

sample query
```{python}
sql = f"""
select * from people
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
sql = f"""
SELECT 
    people_first_name, 
    people_last_name, 
    email
FROM 
    people
ORDER BY 
    people_last_name;
"""
```
```{python}
#| echo: false
#| eval: true

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1

```{python}
sql = f"""
SELECT 
    people_last_name, 
    name tag
FROM 
    peopleskills a 
    inner join people b on (a.people_id=b.people_id)
    inner join skills c on (a.skills_id=c.id)
WHERE
    people_last_name='Person 1'
ORDER BY 
    name,
    people_last_name;
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6

```{python}
sql = f"""
SELECT 
    p.people_first_name,
    p.people_last_name
FROM 
    people p
JOIN
    peopleskills ps ON p.people_id = ps.people_id
WHERE
    ps.skills_id = 6
ORDER BY 
    p.people_last_name;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role

```{python}
sql = f"""
SELECT 
    p.people_first_name, p.people_last_name
FROM 
    people p
JOIN 
    peopleroles pr ON p.people_id = pr.people_id
JOIN 
    roles r ON pr.role_id = r.id
WHERE 
    r.name = 'Developer';
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills

```{python}
sql = f"""
SELECT
    p.people_first_name, p.people_last_name, p.email
FROM 
    people p
LEFT JOIN 
    peopleskills ps ON p.people_id = ps.people_id
WHERE 
    ps.people_id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills

```{python}
sql = f"""
SELECT s.name, s.tag
FROM skills s
LEFT JOIN peopleskills ps ON s.id = ps.skills_id
WHERE ps.skills_id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role

```{python}
sql = f"""
SELECT 
    p.people_first_name, 
    p.people_last_name, 
    s.name AS skill_name
FROM 
    people p
JOIN 
    peopleroles pr ON p.people_id = pr.people_id
JOIN 
    roles r ON pr.role_id = r.id
LEFT JOIN 
    peopleskills ps ON p.people_id = ps.people_id
LEFT JOIN 
    skills s ON ps.skills_id = s.id
WHERE 
    r.name = 'Boss';
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles

```{python}
sql = f"""
SELECT r.id, r.name
FROM roles r
LEFT JOIN peopleroles pr ON r.id = pr.role_id
WHERE pr.role_id IS NULL;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection

Going into this assignment, it seemed slightly overwhelming considering the fact that I had to start using a newly learned language to construct a database. As I took things step by step I was able to understand each part of the process. It became easier to write queries, once I understood what kinds of keys and values each table had. At times I would go back and forth between my ddl and qmd file to make some changes in terms of how I was assigning my values and fix the tables that were not getting populated correctly at the time. Looking back at some of the lectures as well as the notes helped with better understanding this assignment. I believe I can now apply what I learned here to outside of the class.
